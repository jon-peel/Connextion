
<section class="col-span-4 bg-gray-200 dark:bg-gray-900 rounded-lg p-4 shadow-md flex flex-col justify-start items-center">
    @if (!string.IsNullOrEmpty(ViewModel.Error))
    {
        <p class="error">@ViewModel.Error</p>
    }

    @foreach (var message in ViewModel.Messages)
    {
        <MessageBlock ViewModel="@message" />
    }
    
    @if (ViewModel.IsBusy)
    {
        <BusyIndicator />
    }
    else
    {
        <form class="flex flex-row justify-between gap-2" @onsubmit="ViewModel.SendMessageAsync">
            <label class="w-1/4" for="newMessage">
                Message :
            </label>
            <InputTextArea id="newMessage" class="w-1/2 !m-0" @bind-Value="ViewModel.NewMessage"></InputTextArea>
            <button class="w-1/4" type="submit">Send</button>
        </form>
    }
</section>

@code {
    // MessageBlockViewModel[] _messages = [];
    
    [Parameter] public required MessagesConversationViewModel ViewModel { get; init; }

    protected override async Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += (_,_) => _ = InvokeAsync(StateHasChanged);
        await ViewModel.InitializeAsync().ConfigureAwait(false);
    }

}