@inject IUserRepository UserRepository;

@if (_users.Any())
{
    <label for="user-select">use con<span class="emphasis">NEXT</span>ion as :</label>
    <InputSelect id="user-select"
        ValueExpression="() => CurrentUserName"
        ValueChanged="(string value) => CurrentUserValueChanged(value)">
        @foreach (var user in _users)
        {
            <option value="@user.Id.Value">@user.DisplayName.Value</option>
        }
    </InputSelect>
    <hr/>
}

@code {
    ProfileSummary[] _users = [];

    string? CurrentUserName => AppState.CurrentUser?.Id.Value;

    [CascadingParameter] public required AppState AppState { get; init; }

    ProfileSummary? Get(string username) => _users.FirstOrDefault(x => username.Equals(x.Id.Value));

    protected override async Task OnInitializedAsync()
    {
        _users  = await UserRepository.GetAllUsersAsync().ToArrayAsync().ConfigureAwait(false);
        await UpdateProfileAsync(_users.First().Id.Value).ConfigureAwait(false);
    }
    
    async Task CurrentUserValueChanged(string value)
    {
        AppState.CurrentUser = null;
        await UpdateProfileAsync(value).ConfigureAwait(false);
    }

    async Task UpdateProfileAsync(string id)
    {
        AppState.CurrentUser = await UserRepository.GetUserAsync(id).ConfigureAwait(false);
    }
}