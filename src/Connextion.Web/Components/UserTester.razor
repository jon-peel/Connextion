@using Connextion.OldD
@inject IUserRepository UserRepository;
@inject IProfileRepository ProfileRepository;

@if (_users.Any())
{
    <InputSelect
        ValueExpression="() => CurrentUserName"
        ValueChanged="(string value) => CurrentUserValueChanged(value)">
        @foreach (var user in _users)
        {
            <option value="@user.Username">@user.DisplayName</option>
        }
    </InputSelect>
    <hr/>
}

@code {
    User[] _users = [];

    string? CurrentUserName => AppState.UserProfile?.Id.Value;

    [CascadingParameter] public required AppState AppState { get; init; }

    User? Get(string username) => _users.FirstOrDefault(x => username.Equals(x.Username));

    protected override async Task OnInitializedAsync()
    {
        _users = await UserRepository.GetAllUsersAsync().ConfigureAwait(false);
        await UpdateProfileAsync(_users.First().Username).ConfigureAwait(false);
    }
    
    async Task CurrentUserValueChanged(string value)
    {
        AppState.UserProfile = null;
        // await Task.Delay(100).ConfigureAwait(false);
        await UpdateProfileAsync(value).ConfigureAwait(false);
    }

    async Task UpdateProfileAsync(string id)
    {
        AppState.UserProfile = await ProfileRepository.GetProfileAsync(id).ConfigureAwait(false);
    }
}